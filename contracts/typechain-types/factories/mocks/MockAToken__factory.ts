/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../common";
import type { MockAToken, MockATokenInterface } from "../../mocks/MockAToken";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "_name",
        type: "string",
      },
      {
        internalType: "string",
        name: "_symbol",
        type: "string",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "burn",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234620003265762000b56803803806200001d816200032b565b928339810190604081830312620003265780516001600160401b03908181116200032657836200004f91840162000351565b916020938482015183811162000326576200006b920162000351565b601260ff196002541617600255825190828211620003105760008054926001958685811c9516801562000305575b88861014620002f1578190601f958681116200029e575b5088908683116001146200023a5784926200022e575b5050600019600383901b1c191690861b1781555b81519384116200021a5784548581811c911680156200020f575b87821014620001fb57838111620001b3575b50859284116001146200014e57839495509262000142575b5050600019600383901b1c191690821b1790555b6040516107929081620003c48239f35b0151905038806200011e565b9190601f1984169585845280842093905b8782106200019b5750508385961062000181575b505050811b01905562000132565b015160001960f88460031b161c1916905538808062000173565b8087859682949686015181550195019301906200015f565b8582528682208480870160051c820192898810620001f1575b0160051c019086905b828110620001e557505062000106565b838155018690620001d5565b92508192620001cc565b634e487b7160e01b82526022600452602482fd5b90607f1690620000f4565b634e487b7160e01b81526041600452602490fd5b015190503880620000c6565b8480528985208994509190601f198416865b8c8282106200028757505084116200026d575b505050811b018155620000da565b015160001960f88460031b161c191690553880806200025f565b8385015186558c979095019493840193016200024c565b9091508380528884208680850160051c8201928b8610620002e7575b918a91869594930160051c01915b828110620002d8575050620000b0565b8681558594508a9101620002c8565b92508192620002ba565b634e487b7160e01b83526022600452602483fd5b94607f169462000099565b634e487b7160e01b600052604160045260246000fd5b600080fd5b6040519190601f01601f191682016001600160401b038111838210176200031057604052565b919080601f84011215620003265782516001600160401b038111620003105760209062000387601f8201601f191683016200032b565b92818452828287010111620003265760005b818110620003af57508260009394955001015290565b85810183015184820184015282016200039956fe608060408181526004918236101561001657600080fd5b600092833560e01c91826306fdde031461057757508163095ea7b31461050657816318160ddd146104e757816323b872dd146103db578163313ce567146103b95783826340c10f19146103595750816370a082311461032357816395d89b4114610200578382639dc29fac1461017d57508163a9059cbb146100ed575063dd62ed3e146100a257600080fd5b346100e957806003193601126100e957806020926100be610698565b6100c66106b3565b6001600160a01b0391821683526005865283832091168252845220549051908152f35b5080fd5b9050346101795781600319360112610179576020928261010b610698565b9160243592338252848752610125848484205410156106c9565b33825284875282822061013985825461070c565b90556001600160a01b031680825293865220805461015890839061072f565b9055825190815260008051602061073d833981519152843392a35160018152f35b8280fd5b809184346101fc57806003193601126101fc57602060008051602061073d833981519152916101aa610698565b6001600160a01b031680865284835281862054909460243592916101d0908411156106c9565b85875283528086206101e383825461070c565b90556101f18260035461070c565b60035551908152a380f35b5050fd5b8383346100e957816003193601126100e9578051908260018054908160011c9060018316928315610319575b6020938484108114610306578388529081156102ea5750600114610294575b505050829003601f01601f191682019267ffffffffffffffff841183851017610281575082918261027d92528261064f565b0390f35b634e487b7160e01b815260418552602490fd5b600187529192508591837fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf65b8385106102d6575050505083010185808061024b565b8054888601830152930192849082016102c0565b60ff1916878501525050151560051b840101905085808061024b565b634e487b7160e01b895260228a52602489fd5b91607f169161022c565b9050346101795760203660031901126101795760209282916001600160a01b0361034b610698565b168252845220549051908152f35b915091346100e957806003193601126100e957602060008051602061073d83398151915291610386610698565b6001600160a01b031680855294825280842080546024359291906103ab90849061072f565b90556101f18260035461072f565b5050346100e957816003193601126100e95760209060ff600254169051908152f35b905034610179576060366003190112610179576103f6610698565b6103fe6106b3565b936044359060018060a01b0380931692838252602096858852610426848885205410156106c9565b8483526005885286832033845288528387842054106104ab578260008051602061073d83398151915294928892878b965288865283832061046886825461070c565b90551696878252845281812061047f84825461072f565b90558581526005845281812033825284522061049c82825461070c565b90558551908152a35160018152f35b865162461bcd60e51b81528087018990526016602482015275496e73756666696369656e7420616c6c6f77616e636560501b6044820152606490fd5b5050346100e957816003193601126100e9576020906003549051908152f35b5050346100e957806003193601126100e95760209181610524610698565b91602435918291338152600587528181209460018060a01b0316948582528752205582519081527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925843392a35160018152f35b8490843461017957826003193601126101795782835460018160011c9060018316928315610645575b6020938484108114610306578388529081156102ea57506001146105f057505050829003601f01601f191682019267ffffffffffffffff841183851017610281575082918261027d92528261064f565b8680529192508591837f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5635b838510610631575050505083010185808061024b565b80548886018301529301928490820161061b565b91607f16916105a0565b6020808252825181830181905290939260005b82811061068457505060409293506000838284010152601f8019910116010190565b818101860151848201604001528501610662565b600435906001600160a01b03821682036106ae57565b600080fd5b602435906001600160a01b03821682036106ae57565b156106d057565b60405162461bcd60e51b8152602060048201526014602482015273496e73756666696369656e742062616c616e636560601b6044820152606490fd5b9190820391821161071957565b634e487b7160e01b600052601160045260246000fd5b919082018092116107195756feddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa26469706673582212205566ee6140e65da7eccc08424dce09fb97899c2f07f824825b501fd50316879f64736f6c63430008180033";

type MockATokenConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockATokenConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockAToken__factory extends ContractFactory {
  constructor(...args: MockATokenConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _name: string,
    _symbol: string,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(_name, _symbol, overrides || {});
  }
  override deploy(
    _name: string,
    _symbol: string,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(_name, _symbol, overrides || {}) as Promise<
      MockAToken & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): MockAToken__factory {
    return super.connect(runner) as MockAToken__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockATokenInterface {
    return new Interface(_abi) as MockATokenInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): MockAToken {
    return new Contract(address, _abi, runner) as unknown as MockAToken;
  }
}
