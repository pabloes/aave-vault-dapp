/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface TimelockAaveVaultInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "aToken"
      | "asset"
      | "deposit"
      | "extendLock"
      | "maxWithdrawable"
      | "owner"
      | "pool"
      | "releaseTime"
      | "sweepATokensAfterRelease"
      | "withdraw"
      | "withdrawAll"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ATokensSwept"
      | "Deposited"
      | "LockExtended"
      | "Withdrawn"
  ): EventFragment;

  encodeFunctionData(functionFragment: "aToken", values?: undefined): string;
  encodeFunctionData(functionFragment: "asset", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "extendLock",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "maxWithdrawable",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pool", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "releaseTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sweepATokensAfterRelease",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAll",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "aToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "asset", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "extendLock", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxWithdrawable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "releaseTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sweepATokensAfterRelease",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAll",
    data: BytesLike
  ): Result;
}

export namespace ATokensSweptEvent {
  export type InputTuple = [
    owner: AddressLike,
    amount: BigNumberish,
    to: AddressLike
  ];
  export type OutputTuple = [owner: string, amount: bigint, to: string];
  export interface OutputObject {
    owner: string;
    amount: bigint;
    to: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DepositedEvent {
  export type InputTuple = [owner: AddressLike, amount: BigNumberish];
  export type OutputTuple = [owner: string, amount: bigint];
  export interface OutputObject {
    owner: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LockExtendedEvent {
  export type InputTuple = [
    oldReleaseTime: BigNumberish,
    newReleaseTime: BigNumberish
  ];
  export type OutputTuple = [oldReleaseTime: bigint, newReleaseTime: bigint];
  export interface OutputObject {
    oldReleaseTime: bigint;
    newReleaseTime: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawnEvent {
  export type InputTuple = [
    owner: AddressLike,
    amount: BigNumberish,
    to: AddressLike
  ];
  export type OutputTuple = [owner: string, amount: bigint, to: string];
  export interface OutputObject {
    owner: string;
    amount: bigint;
    to: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface TimelockAaveVault extends BaseContract {
  connect(runner?: ContractRunner | null): TimelockAaveVault;
  waitForDeployment(): Promise<this>;

  interface: TimelockAaveVaultInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  aToken: TypedContractMethod<[], [string], "view">;

  asset: TypedContractMethod<[], [string], "view">;

  deposit: TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;

  extendLock: TypedContractMethod<
    [newReleaseTime: BigNumberish],
    [void],
    "nonpayable"
  >;

  maxWithdrawable: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  pool: TypedContractMethod<[], [string], "view">;

  releaseTime: TypedContractMethod<[], [bigint], "view">;

  sweepATokensAfterRelease: TypedContractMethod<
    [to: AddressLike],
    [void],
    "nonpayable"
  >;

  withdraw: TypedContractMethod<
    [amount: BigNumberish, to: AddressLike],
    [void],
    "nonpayable"
  >;

  withdrawAll: TypedContractMethod<[to: AddressLike], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "aToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "asset"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "deposit"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "extendLock"
  ): TypedContractMethod<[newReleaseTime: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "maxWithdrawable"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pool"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "releaseTime"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "sweepATokensAfterRelease"
  ): TypedContractMethod<[to: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<
    [amount: BigNumberish, to: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawAll"
  ): TypedContractMethod<[to: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "ATokensSwept"
  ): TypedContractEvent<
    ATokensSweptEvent.InputTuple,
    ATokensSweptEvent.OutputTuple,
    ATokensSweptEvent.OutputObject
  >;
  getEvent(
    key: "Deposited"
  ): TypedContractEvent<
    DepositedEvent.InputTuple,
    DepositedEvent.OutputTuple,
    DepositedEvent.OutputObject
  >;
  getEvent(
    key: "LockExtended"
  ): TypedContractEvent<
    LockExtendedEvent.InputTuple,
    LockExtendedEvent.OutputTuple,
    LockExtendedEvent.OutputObject
  >;
  getEvent(
    key: "Withdrawn"
  ): TypedContractEvent<
    WithdrawnEvent.InputTuple,
    WithdrawnEvent.OutputTuple,
    WithdrawnEvent.OutputObject
  >;

  filters: {
    "ATokensSwept(address,uint256,address)": TypedContractEvent<
      ATokensSweptEvent.InputTuple,
      ATokensSweptEvent.OutputTuple,
      ATokensSweptEvent.OutputObject
    >;
    ATokensSwept: TypedContractEvent<
      ATokensSweptEvent.InputTuple,
      ATokensSweptEvent.OutputTuple,
      ATokensSweptEvent.OutputObject
    >;

    "Deposited(address,uint256)": TypedContractEvent<
      DepositedEvent.InputTuple,
      DepositedEvent.OutputTuple,
      DepositedEvent.OutputObject
    >;
    Deposited: TypedContractEvent<
      DepositedEvent.InputTuple,
      DepositedEvent.OutputTuple,
      DepositedEvent.OutputObject
    >;

    "LockExtended(uint256,uint256)": TypedContractEvent<
      LockExtendedEvent.InputTuple,
      LockExtendedEvent.OutputTuple,
      LockExtendedEvent.OutputObject
    >;
    LockExtended: TypedContractEvent<
      LockExtendedEvent.InputTuple,
      LockExtendedEvent.OutputTuple,
      LockExtendedEvent.OutputObject
    >;

    "Withdrawn(address,uint256,address)": TypedContractEvent<
      WithdrawnEvent.InputTuple,
      WithdrawnEvent.OutputTuple,
      WithdrawnEvent.OutputObject
    >;
    Withdrawn: TypedContractEvent<
      WithdrawnEvent.InputTuple,
      WithdrawnEvent.OutputTuple,
      WithdrawnEvent.OutputObject
    >;
  };
}
